#!/usr/bin/perl -- # -*-Perl-*-

# MIT License
#
# Copyright (c) 2023 Greg Renda
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use IO::Socket;
use IO::Select;
use Digest::SHA qw(sha1_base64);

use constant HTTP_OK	=> "HTTP/1.0 200 OK\r\n";
use constant WS_UUID	=> '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
use constant WS_FIN	=> 1 << 7;
use constant WS_MASK	=> 1 << 7;
use constant WS_OP_TEXT	=> 1;

use constant KEYS	=> { zero=>0, one=>1, two=>2, three=>3, four=>4,
			     five=>5, six=>6, seven=>7, eight=>8, nine=>9,
			     asterisk=>0xa, pound=>0xb,
			     one_and_asterisk=>0xc,
			     asterisk_and_pound=>0xd,
			     three_and_pound=>0xe,
			     a=>0x1c, b=>0x1d, c=>0x1e, d=>0x1f };

use constant DISPLAY	=> { alarm=>1, away=>2, no=>3, bypass=>4, chime=>5,
			     not_ready=>6, instant=>7, check=>9, fire=>13,
			     bat=>14, stay=>15, night=>20, canceled=>21 };

use constant INVERTED	=> (1 << DISPLAY->{no}) | (1 << DISPLAY->{not_ready});

use constant TWO_TONES		=> 0;
use constant THREE_SLOW_BEEPS	=> 8;
use constant DISABLE_LOW_DIGIT	=> 10;
use constant DISABLE_HIGH_DIGIT => 11;
use constant READY_LED		=> 12;

use constant BEEP_MASK		=> 0x00070000;
use constant BEEP_SHIFT		=> 16;

use constant BEEPS	=> { 1=>'one', 2=>'two', 3=>'three' };

my ($httpPort, $wsPort, $panelHostPort) = @ARGV;

die "$0: <http port> <web socket port> <panel host:port>\n" unless
    $httpPort and $wsPort and $panelHostPort;

my $httpServer = new IO::Socket::INET Listen=>1, LocalPort=>$httpPort,
    Proto=>'tcp', Reuse => 1 or die;
my $wsServer = new IO::Socket::INET Listen=>1, LocalPort=>$wsPort,
    Proto=>'tcp', Reuse => 1 or die;
my $panel = new IO::Socket::INET PeerAddr=>$panelHostPort, Proto=>'udp';

my $sel = new IO::Select $httpServer, $wsServer, $panel;
my $dataStart = tell DATA;
my (%wsClients, $lastKeyTime, $lastKeyClient, $prevMsg);

while (1)
{
    if (time - $lastKeyTime >= 30)
    {
	$panel->write(chr(0xff));	# panel wakeup
	$lastKeyTime = time;
    }

    for ($sel->can_read(30))
    {
	if ($_ eq $httpServer)
	{
	    my $httpClient = $httpServer->accept;
	    my $path;
	    my $oldFh = select $httpClient;

	    while (<$httpClient>)
	    {
		s/[\r\n]$//g;
		$path = (split /\s/)[1] if /^GET/;
		last if /^$/;
	    }

	    if ($path eq '/')
	    {
		print HTTP_OK, "\r\n";
		seek DATA, $dataStart, 0;

		my $wsUrl = "\"ws://@{[$httpClient->sockhost()]}:$wsPort\"";

		while (<DATA>)
		{
		    s/WS_URL/$wsUrl/;
		    print;
		}
	    }
	    elsif ($path eq '/drawings/keypad.svg')
	    {
		print HTTP_OK, "Content-type: image/svg+xml\r\n\r\n";
		open my $file, 'drawings/keypad.svg' or die;
		print <$file>;
	    }
	    elsif ($path =~ m%^/audio/.+mp3%)
	    {
		print HTTP_OK, "Content-type: audio/mpeg\r\n\r\n";
		$path =~ s%^/%%;
		open my $file, $path or die "Can't open $path\n";
		print <$file>;
	    }
	    else
	    {
		print "HTTP/1.0 404 Not Found\r\n\r\n";
	    }

	    select $oldFh;
	    close $httpClient;
	}
	elsif ($_ eq $wsServer)
	{
	    my $wsClient = $wsServer->accept;
	    $sel->add($wsClient);

	    my $key;

	    while (<$wsClient>)
	    {
		s/[\r\n]$//g;
		$key = (split /\s/)[1] if /^Sec-WebSocket-Key/;
		last if /^$/;
	    }

	    my $reply = sha1_base64($key.WS_UUID).'=';

	    print $wsClient <<END;
HTTP/1.1 101 Switching Protocols\r
Upgrade: websocket\r
Connection: Upgrade\r
Sec-WebSocket-Accept: $reply\r
\r
END
	    $wsClients{$wsClient}{want} = 2;
	    $wsClients{$wsClient}{wsState} = 'header';
	    $wsClients{$wsClient}{sock} = $wsClient;
	}
	elsif ($_ eq $panel)
	{
	    $panel->recv(my $buf, 4);

	    if (keys %wsClients)
	    {
		my $msg = unpack('N', $buf) ^ INVERTED;

		for (keys %wsClients)
		{
		    my $c = $wsClients{$_};
		    my $state = $msg & (1 << READY_LED) ? 1 : 0;

		    for (qw(ready_led))
		    {
			if (!exists $c->{state}{$_} or $c->{state}{$_} ne $state)
			{
			    sendClient($c, item=>$_,
				       color=>$state ? '#00ff00' : '#808080');
			    $c->{state}{$_} = $state;
			}
		    }

		    $state = $msg & ((1 << DISPLAY->{away}) |
				     (1 << DISPLAY->{stay})) ? 1 : 0;

		    for (qw(armed_led))
		    {
			if (!exists $c->{state}{$_} or $c->{state}{$_} ne $state)
			{
			    sendClient($c, item=>$_,
					color=>$state ? '#ff0000' : '#808080');
			    $c->{state}{$_} = $state;
			}
		    }

		    for my $item (keys %{DISPLAY()})
		    {
			$state = $msg & (1 << DISPLAY->{$item}) ? 1 : 0;

			# disable NOT READY if any led is on or ALARM or CHECK
			# is on
			$state = 0 if $item eq 'not_ready' and
			    ($c->{state}{ready_led} or $c->{state}{armed_led} or
			     $msg & (1 << DISPLAY->{alarm}) or
			     $msg & (1 << DISPLAY->{check}));

			if (!exists $c->{state}{$item} or
			    $c->{state}{$item} != $state)
			{
			    sendClient($c, item=>$item, visible=>$state);
			    $c->{state}{$item} = $state;
			}
		    }

		    digit($c, $c->{state}, $msg & (1 << DISABLE_LOW_DIGIT) ?
			  'off' : sprintf('%x', ($msg >> 24) & 0xf), 'low');
		    digit($c, $c->{state}, $msg & (1 << DISABLE_HIGH_DIGIT) ?
			  'off' : sprintf('%x', $msg >> 28), 'high');

		    if (!$c->{state}{mute})
		    {
			# stop two tone looping
			sendClient($c, audio=>'stop') if
			    ($prevMsg & (1 << TWO_TONES)) &&
			    !($msg & (1 << TWO_TONES));

			my $beep = ($msg & BEEP_MASK) >> BEEP_SHIFT;
			my $prevBeep = ($prevMsg & BEEP_MASK) >> BEEP_SHIFT;

			if ($msg & (1 << THREE_SLOW_BEEPS))
			{
			    sendClient($c, audio=>'audio/threeslow.mp3');
			}
			elsif ($msg & (1 << TWO_TONES))
			{
			    sendClient($c, audio=>'audio/twotone.mp3', loop=>1);
			}
			elsif (!$beep and $prevBeep == 4)
			{
			    sendClient($c, audio=>'stop');
			}
			elsif ($beep == 4)
			{
			    sendClient($c, audio=>'audio/fast.mp3', loop=>1);
			}
			elsif ($beep == 5 or $beep == 6)
			{
			    sendClient($c, audio=>'audio/twoslow.mp3', loop=>1);
			}
			else
			{
			    # only send regular beeps to the client that
			    # was typing
			    sendClient($c,
				       audio=>"audio/@{[BEEPS->{$beep}]}.mp3") if
				exists BEEPS->{$beep} and
				exists $wsClients{$lastKeyClient} and
				$c->{sock} == $lastKeyClient;
			}
		    }
		}

		$prevMsg = $msg;
	    }
	}
	else
	{
	    my $close;
	    my $c = $wsClients{$_};
	    $_->recv(my $buf, $c->{want});

	    if (length $buf)
	    {
		$c->{buf} .= $buf;

		if (!($c->{want} -= length $buf))
		{
		    $c->{wsState} eq 'header' && do
		    {
			my ($op, $len) = unpack('CC', $buf);
			my $mask = $len & WS_MASK;

			$op &= 0xf;
			$len &= 0x7f;

			if ($op == WS_OP_TEXT && $len < 126)
			{
			    $c->{want} = $len + ($mask ? 4 : 0);
			    $c->{wsState} = 'data';
			}
			else
			{
			    $close = 1;
			}
			last;
		    };

		    $c->{wsState} eq 'data' && do
		    {
			my @mask = unpack 'xxC4', $c->{buf};
			my ($text, $i);

			$text .= chr($_ ^ $mask[$i++ & 3]) for
			    unpack 'x6C*', $c->{buf};

			if ($text =~ /mute/)
			{
			    $c->{state}{mute} = $text eq 'mute';
			}
			else
			{
			    $panel->write(pack 'C', KEYS->{$text}) if exists
				KEYS->{$text};
			}

			delete $c->{buf};
			$c->{want} = 2;
			$c->{wsState} = 'header';
			$lastKeyTime = time;
			$lastKeyClient = $c->{sock};
			last;
		    };
		}
	    }
	    else
	    {
		$close = 1;
	    }

	    if ($close)
	    {
		$sel->remove($c->{sock});
		$c->{sock}->close;
		delete $wsClients{$c->{sock}};
	    }
	}
    }
}

sub digit
{
    my ($c, $stateHash, $state, $id) = @_;

    if (!exists $stateHash->{$id} or $stateHash->{$id} ne $state)
    {
	# turn off the old digit
	sendClient($c, item=>"${id}_$stateHash->{$id}", visible=>0) if
	    exists $stateHash->{$id} and $stateHash->{$id} ne 'off';

	# turn on the new digit
	sendClient($c, item=>"${id}_$state", visible=>1) unless $state eq 'off';
	$stateHash->{$id} = $state;
    }
}

sub sendClient
{
    my $c = shift;
    my %data = @_;
    my $json =
	'{'.join(', ', map { "\"$_\": \"$data{$_}\"" } sort keys %data).'}';

    $c->{sock}->send(wsWrap($json));
}

sub wsWrap
{
    my $text = shift;

    pack('CC', WS_FIN | WS_OP_TEXT, length($text)).$text;
}

__DATA__
<!DOCTYPE html>

<html>
<head>
  <title>Keypad</title>
</head>

<body>
  <object id="svg-object" data="drawings/keypad.svg" type="image/svg+xml"></object>
</body>

<script type="text/javascript">
  var ws = new WebSocket(WS_URL), down = 0, playing = false;

  function mouseup(b)
  {
      if (down != 0)
      {
	  var r = down.getElementsByTagName("rect");
	  r[0].style.fillOpacity = 0;
	  ws.send(down.id);
	  down = 0;
      }
  }

  function mousedown(b)
  {
      if (down == 0)
      {
	  var r = b.getElementsByTagName("rect");
	  r[0].style.fillOpacity = 1;
	  down = b;
      }
  }

  function mouseout(b)
  {
      if (down != 0)
      {
	  var r = down.getElementsByTagName("rect");
	  r[0].style.fillOpacity = 0;
	  down = 0;
      }
  }

  window.addEventListener("load", function()
  {
      var svgObject = document.getElementById("svg-object").contentDocument,
	  svg = svgObject.getElementById("keypad"),
	  id;

      svg.style.userSelect = 'none';	// nothing is selectable

      // hide all the display elements
      for (const x of svg.getElementById("indicators").querySelectorAll("text"))
      {
	  if (x.id != "ac")	// AC indicator is always on
	  {
	      x.style.display = "none";
	  }
      }

      for (const x of svg.getElementById("digits").querySelectorAll("path"))
      {
	  x.style.display = "none";
      }

      // turn off leds
      svg.getElementById("ready_led").style.fill = "#808080";
      svg.getElementById("armed_led").style.fill = "#808080";

      // bind mouse events to the buttons
      for (id of ["zero", "one", "two", "three", "four", "five", "six",
		  "seven", "eight", "nine", "a", "b", "c", "d",
		  "asterisk", "pound",
		  "one_and_asterisk", "asterisk_and_pound", "three_and_pound"])
      {
	  var b = svg.getElementById(id);

	  b.style.cursor = "pointer";

	  b.addEventListener("mouseup", mouseup.bind(null, b));
	  b.addEventListener("mousedown", mousedown.bind(null, b));
	  b.addEventListener("mouseout", mouseout.bind(null, b));

	  b.addEventListener("touchstart", mousedown.bind(null, b));
	  b.addEventListener("touchmove", mouseout.bind(null, b));
      }

      var audio = new Audio, audioSrc;
      audio.onended = function() { playing = false; };

      ws.onmessage = function(event)
      {
	  const data = JSON.parse(event.data);

	  if (typeof data.audio !== "undefined")
	  {
	      if (data.audio == "stop" && playing)
	      {
		  audio.pause();
		  playing = false;

	      }
	      else if (!playing || data.audio != audioSrc)
	      {
		  audioSrc = data.audio;
		  audio.src = data.audio;
		  audio.loop = data.loop;
		  audio.play();
		  playing = true;
	      }
	  }
	  else if (/_led$/.test(data.item))
	  {
	      svg.getElementById(data.item).style.fill = data.color;
	  }
	  else
	  {
	      svg.getElementById(data.item).style.display =
		  data.visible == 1 ? "inline" : "none";
	  }
      }

      function mute_unmute(from, to)
      {
	  from.style.display = "none";
	  to.style.display = "inline";
	  ws.send(to.id);
	  audio.pause();
	  playing = false;
      }

      var mute = svg.getElementById("mute"),
	  unmute = svg.getElementById("unmute");

      mute.style.display = "none";      // hide mute icon
      mute.style.cursor = "pointer";
      unmute.style.cursor = "pointer";

      mute.addEventListener("mouseup", mute_unmute.bind(null, mute, unmute));
      unmute.addEventListener("mouseup", mute_unmute.bind(null, unmute, mute));
  });
</script>

</html>
